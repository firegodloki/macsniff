extern "C" {
  #include <user_interface.h>
}

struct RxControl {
 signed rssi:8; // signal intensity of packet
 unsigned rate:4;
 unsigned is_group:1;
 unsigned:1;
 unsigned sig_mode:2; // 0:is 11n packet; 1:is not 11n packet;
 unsigned legacy_length:12; // if not 11n packet, shows length of packet.
 unsigned damatch0:1;
 unsigned damatch1:1;
 unsigned bssidmatch0:1;
 unsigned bssidmatch1:1;
 unsigned MCS:7; // if is 11n packet, shows the modulation
 // and code used (range from 0 to 76)
 unsigned CWB:1; // if is 11n packet, shows if is HT40 packet or not
 unsigned HT_length:16;// if is 11n packet, shows length of packet.
 unsigned Smoothing:1;
 unsigned Not_Sounding:1;
 unsigned:1;
 unsigned Aggregation:1;
 unsigned STBC:2;
 unsigned FEC_CODING:1; // if is 11n packet, shows if is LDPC packet or not.
 unsigned SGI:1;
 unsigned rxend_state:8;
 unsigned ampdu_cnt:8;
 unsigned channel:4; //which channel this packet in.
 unsigned:12;
};
struct LenSeq{
 u16 len; // length of packet
 u16 seq; // serial number of packet, the high 12bits are serial number,
 // low 14 bits are Fragment number (usually be 0)
 u8 addr3[6]; // the third address in packet
};
struct sniffer_buf{
 struct RxControl rx_ctrl;
 u8 buf[36 ]; // head of ieee80211 packet
 u16 cnt; // number count of packet
 struct LenSeq lenseq[1]; //length of packet
};
struct sniffer_buf2{
 struct RxControl rx_ctrl;
 u8 buf[112];
 u16 cnt;
 u16 len; //length of packet
}; 

struct framectrl_80211
{
u8 Protocol:2;
u8 Type:2;
u8 Subtype:4;
u8 ToDS:1;
u8 FromDS:1;
u8 MoreFlag:1;
u8 Retry:1;
u8 PwrMgmt:1;
u8 MoreData:1;
u8 Protectedframe:1;
u8 Order:1;
};

struct probe_request_80211
{
  struct framectrl_80211 framectrl;
  uint16 duration;
  uint8 rdaddr[6];
  uint8 tsaddr[6];
  uint8 bssid[6];
  uint16 sequencectrl;
  uint8 addr4[6];
  uint16 qos;
  uint32 htctrl;
};

//802.11 Mac Header
void sniffer_wifi_promiscuous_rx(uint8 * buf, short unsigned int len){


   struct LenSeq * lenseq;
    
    if(len == 12){
      
    }
    if(len == 128){
      
    }else{
     // Serial.println(len);
      struct sniffer_buf *sniffer_data = (struct sniffer_buf*) buf;
      struct probe_request_80211 *probe_request = (struct probe_request_80211*) sniffer_data->buf;
       char str[190];
      //sprintf(str,"rdaddr: %02x:%02x:%02x:%02x:%02x:%02x tsaddr: %02x:%02x:%02x:%02x:%02x:%02x bssid: %02x:%02x:%02x:%02x:%02x:%02x addr4: %02x:%02x:%02x:%02x:%02x:%02x\n", 
      //    MAC2STR(probe_request->rdaddr), MAC2STR(probe_request->tsaddr), MAC2STR(probe_request->bssid), MAC2STR(probe_request->addr4));
    

       sprintf(str,"%02x:%02x:%02x:%02x:%02x:%02x", 
           MAC2STR(probe_request->bssid));
       Serial.println(str);
    }
    
     
 
}

void setup() {
  //
  Serial.begin(115200); 
  // put your setup code here, to run once:
  Serial.println("Serial ON");
  delay(500);
  wifi_set_opmode(STATION_MODE);
  wifi_promiscuous_enable(1); 
  Serial.println("Serial ON");
  wifi_set_channel(6);
 
   wifi_set_promiscuous_rx_cb(sniffer_wifi_promiscuous_rx);
   char ap_mac[6] = {0x16, 0x34, 0x56, 0x78, 0x90, 0xab};
   Serial.println("set MAC");
  Serial.println(ap_mac);
   wifi_promiscuous_set_mac((const uint8_t*)ap_mac);
   Serial.println("Setup DONE");
}
byte channel;

void loop() {
  // put your main code here, to run repeatedly:
     channel = random(1, 11); 
    wifi_set_channel(channel);
     Serial.print("channel ");
     Serial.println(channel);
     
    delay(5000);
}
